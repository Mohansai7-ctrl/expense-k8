#1)as HPA is using, 2 things need to be done, i)install metric server and ii)include resources(requests and limits) in the code:
#installing metric-server:
# kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
#checking installed or not:

#[ ec2-user@ip-172-31-34-198 ~ ]$ kubectl get pods -n kube-system | grep metrics-server
#metrics-server-d5865ff47-bnlsh       1/1     Running   0          2m4s


#2)Download apache bench to test the application by sending requests loading the application:
# sudo dnf install httpd-tools -y
#dnf list installed | grep httpd-tools
# usage:
# ab -n 1000 -c 50 http://a066cb3d1f5c9440cb250a0085fdca65-1499047333.us-east-1.elb.amazonaws.com:80/



#it should take the configMap data of DB_HOST: mysql
apiVersion: v1
kind: ConfigMap
metadata:
  name: backend
  namespace: expense
data:
  DB_HOST: mysql   #this is the Service name of mysql service

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: expense
  labels:
    app: backend
    tier: app
    project: expense
  
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
      tier: app
      project: expense
  template:
    metadata:
      #name: backend
      labels:
        app: backend
        tier: app
        project: expense
    spec:
      initContainers:
      - name: mysql-initcontainers
        image: busybox:1.28  #basic image to have or download the commands like sh and nslookup
        command: ['sh', '-c', "until nslookup mysql; do echo waiting for myservice; sleep 2; done"]
      containers:
      - name: backend
        image: mohansai7/backend:v1
        resources:
          requests:  #min things, required requests, this requests should be less than or equal to/the limits
            cpu: 100m
            memory: 128Mi
          limits:  #this is the max limit, and limits should be equal or greater than the requests
            cpu: 100m
            memory: 128Mi
        envFrom:
        - configMapRef:
            name: backend
        readinessProbe:
          tcpSocket:
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          httpGET:
            path: /health   #kubelet will send httpGET request to the path /health on port 8080, if successful status will be 200-399, if failed then 400-5xx, then kubelet will kill the container and restarts it.
            port: 8080
            # httpHeaders:
            # - name:
            #   value: 
          initialDelaySeconds: 3
          periodSeconds: 3

---

apiVersion: v1
kind: Service
metadata:
  name: backend  #name should be same as above replicas metadata,This should be backend only, because frontend appliation/pods will try to connect to backend with name as backend
  namespace: expense
spec:
  selector:
    project: expense
    app: backend
    tier: app
  ports:
  - name: backend-svc-port
    protocol: TCP
    port: 8080
    targetPort: 8080


---
# creating HPA ---> HorizontalPodAutoscaler
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: backend
  namespace: expense
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: backend
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 15 #usually in real time projects, this target cpu utilization or threshold is 75%
  #for memory utilization metric, use metrics block instead/unlike targetCPUUtilizationPercentage
  # metrics:
  #   - type: Resource
  #     resource:
  #       name: memory
  #       type: Utilization
  #       averageUtilization: 80









